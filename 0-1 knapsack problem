#include <iostream>
using namespace std;
int max(int a,int b)
{
    if(a>b)
    return a;
    else
    return b;
}
int main() {
    int n,m;
    cin>>n>>m;
    int wt[n+1],p[n+1],k[n+1][m+1];
    int i,w,j,t1,t2;
    wt[0]=p[0]=0;
    for(i=1;i<=n;i++)
    cin>>wt[i];
    for(j=1;j<=n;j++)
    cin>>p[j];
    for(i=1;i<=n;i++)
    {
        for(j=i+1;j<=n;j++)
        {
            if(wt[i]>wt[j])
            {
                
                t1 = wt[i];
                wt[i] = wt[j];
                wt[j] = t1;
                
                 t1 = p[i];
                p[i] = p[j];
                p[j] = t1;
            }
        }
    }

	
	for(int i=0;i<=n;i++)
	{
	    for(int w=0;w<=m;w++)
	    {
	        if(i==0|| w==0)
	        {
	            k[i][w]=0;
	            
	        }
	        else if(wt[i]<=w)
	        k[i][w] = max(p[i] + k[i-1][w-wt[i]] ,  k[i-1][w]);
	        else
	        k[i][w] = k[i-1][w];
	        cout<<k[i][w]<<" ";
	    }
	    cout<<endl;
	   
	}
	return 0;
}







/*********************************RECURSIVE SOLUTION FOR 0/1 KNAPSACK************************************/

#include <bits/stdc++.h>
using namespace std;


int knapSack(int wt[], int val[], int W, int n){
    if(n == 0 || W == 0)
    return 0;
    if(wt[n-1] <= W)
    {  
       
        return max(val[n-1] + knapSack(wt, val, W-wt[n-1], n - 1), knapSack(wt, val, W, n-1));
    }
    else 
    {
        return knapSack(wt, val, W, n-1);
        }
}
int main(){
    int n, i, W;
    cin>>n;
    int wt[n + 1], val[n + 1];
    for(i = 0; i < n; i++)
    cin>>wt[i];
    for(i = 0; i < n; i++)
    cin>>val[i];
    cin>>W;
    cout<<knapSack(wt, val, W, n);
return 0; 
}










/************************************MEMOIZATION***************************************************/

#include <bits/stdc++.h>
using namespace std;
int t[100][1000];


int knapSack(int wt[], int val[], int W, int n){
    if(n == 0 || W == 0)
    return 0;
    if(t[n][W] != -1)
    return t[n][W];
    if(wt[n-1] <= W)
    {  
       
        return t[n][W] = max(val[n-1] + knapSack(wt, val, W-wt[n-1], n - 1), knapSack(wt, val, W, n-1));
    }
    else 
    {
        return t[n][W] = knapSack(wt, val, W, n-1);
        }
}
int main(){
    memset(t, -1, sizeof(t));
    int n, i, W;
    cin>>n;
    int wt[n + 1], val[n + 1];
    for(i = 0; i < n; i++)
    cin>>wt[i];
    for(i = 0; i < n; i++)
    cin>>val[i];
    cin>>W;
    cout<<knapSack(wt, val, W, n);
return 0; 
}

